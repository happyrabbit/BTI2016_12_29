install.packages(c("BH", "broom", "devtools", "dplyr", "evaluate", "fields", "formatR", "geepack", "geosphere", "git2r", "highr", "httr", "jsonlite", "knitr", "lazyeval", "lme4", "MCMCpack", "mime", "miniCRAN", "nlme", "plyr", "psych", "quantreg", "RcppArmadillo", "rgdal", "rgeos", "rmarkdown", "rstudioapi", "rvest", "slam", "sp", "spatstat", "spdep", "survival", "tidyr", "useful", "VGAM", "WikidataR", "WikipediR", "withr", "XLConnect", "XLConnectJars", "xml2", "Zelig", "zoo"))
source("00-course-setup.r")
source("00-course-setup.r")
source("00-course-setup.r")
wd <- getwd()
# set temporary working directory
tempwd <- ("data/wikipediaStatisticians")
dir.create(tempwd)
setwd(tempwd)
url <- "http://en.wikipedia.org/wiki/List_of_political_scientists"
browseURL(url)
url <- "https://en.wikipedia.org/wiki/List_of_statisticians"
browseURL(url)
## step 2: retrieve links
html <- read_html(url)
anchors <- html_nodes(html, xpath="//a")
length(anchors) # probably too many?
anchors <- html_nodes(html, xpath="//ul/li/a[1]")
links <- html_attr(anchors, "href")
links
length(anchors) # probably too many?
anchors <- html_nodes(html, xpath="//ul/li/a[1]")
links <- html_attr(anchors, "href")
links_iffer <-
seq_along(links) >=
seq_along(links)[str_detect(links, "Odd_Aalen")] &
seq_along(links) <=
seq_along(links)[str_detect(links, "George_Kingsley_Zipf")] &
str_detect(links, "/wiki/")
links_index <- seq_along(links)[links_iffer]
links <- links[links_iffer]
length(links)
links
##  step 3: extract names
names <- html_attr(anchors, "title")[links_index]
names <- str_replace(names, " \\(.*\\)", "")
names
length(links)
## step 4: fetch personal wiki pages
baseurl <- "http://en.wikipedia.org"
HTML <- list()
Fname <- str_c(basename(links), ".html")
URL <- str_c(baseurl, links)
# loop
for ( i in seq_along(links) ){
# url
url <- URL[i]
# fname
fname <- Fname[i]
# download
if ( !file.exists(fname) ) download.file(url, fname)
# read in files
HTML[[i]] <- read_html(fname)
}
## step 5: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
## step 6: visualize connections
dir.create("figures")
d3SimpleNetwork(connections,
width = 1000,
height = 900,
file="figures/connections.html")
browseURL("figures/connections.html")
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from",
Target = "to", opacity = 0.9, zoom = T, width = 1000, height = 900, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
head(connections)
dim(connections)
# install packages from CRAN
p_needed <- c("RCurl", "XML", "stringr", "jsonlite", "httr", "rvest", "devtools", "ggmap", "wikipediatrend", "networkD3", "RSelenium", "sp", "twitteR", "streamR", "maptools", "rgdal", "maps", "TeachingDemos", "ggmap")
packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
lapply(p_needed, require, character.only = TRUE)
forceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from",
Target = "to", opacity = 0.9, zoom = T, width = 1000, height = 900, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
forceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to")
?forceNetwork
head(connections)
data(MisLinks)
data(MisNodes)
head(MisLinks)
connections$value <- 1
head(MisNodes)
forceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", Value = "value", NodeID = "name")
nodesDF <- data.frame(name = names, group = 1)
forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group")
connections$from
sort(connections)
sort(connections$from)[1:100]
?saveNetwork
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group")
saveNetwork(network_out, file = 'figures/connections.html')
dir.create("figures")
saveNetwork(network_out, file = 'figures/connections.html')
saveNetwork(network_out, file = './figures/connections.html')
dir()
?force
?forceNetwork
saveNetwork(network_out, file = './figures/connections.html')
?saveNetwork
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
View(connections)
table(connections)
table(connections$from)
?arrange
connections <- arrange(connections, from)
connections <- dplyr::arrange(connections, from)
View(connections)
connections$fromNum <- table(connections$from)
class(connections)
dim(connections)
View(connections)
sort(unique(connections$from))
sort(unique(connections$to))
connections$fromCount <- count(connections, from)
library(plyr)
p_needed <- c("plyr", "dplyr", "stringr", "jsonlite", "httr", "rvest", "devtools", "ggmap", "wikipediatrend", "networkD3", "RSelenium", "sp", "twitteR", "streamR", "maptools", "rgdal", "maps", "TeachingDemos", "ggmap")
# install packages from CRAN
p_needed <- c("plyr", "dplyr", "stringr", "jsonlite", "httr", "rvest", "devtools", "ggmap", "wikipediatrend", "networkD3", "RSelenium", "sp", "twitteR", "streamR", "maptools", "rgdal", "maps", "TeachingDemos", "ggmap")
packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
lapply(p_needed, require, character.only = TRUE)
connections <- arrange(connections, from)
connections$fromCount <- count(connections, from)
count(connections, from)
fromCount_df <- count(connections, from)
?count
?count
names(fromCount_df) <- c("from", "fromCount")
connections_df <- merge(connections, fromCount_df, by = "from", all = TRUE)
View(connections_df)
toCount_df <- count(connections, to)
names(toCount_df) <- c("to", "toCount")
connections_df <- merge(connections, fromCount_df, by = "from", all = TRUE)
connections_df <- merge(connections, toCount_df, by = "to", all = TRUE)
connections_df <- merge(connections, fromCount_df, by = "from", all = TRUE)
connections_df <- merge(connections_df, toCount_df, by = "to", all = TRUE)
View(connections_df)
hist(connections_df$toCount)
i=1
Fname
i=533
i=185
url <- URL[i]
# fname
fname <- Fname[i]
foo <-  <- read_html(fname)
foo <- read_html(fname)
foo
## step 5: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//p//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
head(connections)
## step 6: visualize connections
dir.create("figures")
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group")
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
View(MisLinks)
## step 5: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//p//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)),
to=links_in_pslinks-1
)
)
}
# re
# results
names(connections) <- c("from", "to")
head(connections)
View(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
## step 6: visualize connections
dir.create("figures")
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group")
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
?forceNetwork
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = .5)
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
MyClickScript <-
'      d3.select(this).select("circle").transition()
.duration(750)
.attr("r", 30)'
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 1, clickAction = MyClickScript)
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 3)
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
