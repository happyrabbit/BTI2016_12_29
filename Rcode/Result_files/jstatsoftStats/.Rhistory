query_terms
query_terms
arxiv_count('au:"Gary King"')
?arxiv_search
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201001010000 TO 201701012400], limit = 10, output_format = "data.frame")
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201001010000 TO 201701012400]", limit = 10, output_format = "data.frame")
View(arxiv_df)
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201001010000 TO 201601012400]", limit = 10, output_format = "data.frame")
View(arxiv_df)
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201401010000 TO 201601012400]", limit = 10, output_format = "data.frame")
View(arxiv_df)
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201601010000 TO 201701012400]", limit = 50, output_format = "data.frame")
View(arxiv_df)
ls("package:aRxiv")
lsf.str("package:aRxiv")
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[2016 TO 2017]", limit = 50, output_format = "data.frame")
View(arxiv_df)
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[2016 TO 2017]", limit = 1000, output_format = "data.frame")
View(arxiv_df)
arxiv_count('abs:"political" AND submittedDate:[2010 TO 2017]')
arxiv_count('abs:"political" AND submittedDate:[2016 TO 2017]')
polsci_articles <- arxiv_search('abs:"political" AND submittedDate:[2016 TO 2017]', limit = 1000)
View(polsci_articles)
library(pageviews)
ls("package:pageviews")
?article_pageviews
trump_views <- article_pageviews(project = "en.wikipedia", article = "Donald Trump", user_type = "user", start = "2015010100", end = "20160720")
View(trump_views)
trump_views <- article_pageviews(project = "en.wikipedia", article = "Donald Trump", user_type = "user", start = "2016010100", end = "20160720")
View(trump_views)
?pageview_timestamps
clinton_views <- article_pageviews(project = "en.wikipedia", article = "Hillary Clinton", user_type = "user", start = "2016010100", end = "20160720")
head(trump_views)
plot(trump_views$views)
?ts
plot(trump_views$timestamp, trump_views$views)
as.Date(trump_views$timestamp)
?ymd
library(lubridate)
ymd(trump_views$timestamp)
ymd_h(trump_views$timestamp)
plot(ymd_h(trump_views$timestamp), trump_views$views)
plot(ymd_h(trump_views$timestamp), trump_views$views, type = "l")
lines(ymd_h(clinton_views$timestamp), clinton_views$views, col = "blue")
plot(ymd_h(trump_views$timestamp), trump_views$views, col = "red", type = "l")
lines(ymd_h(clinton_views$timestamp), clinton_views$views, col = "blue")
hist(clinton_views$views)
plot(ymd_h(trump_views$timestamp), trump_views$views, col = "red", type = "l")
lines(ymd_h(clinton_views$timestamp), clinton_views$views, col = "blue")
View(trump_views)
browseURL("http://www.enigma.io/")
api_key <- Sys.getenv("twitter_api_key")
api_secret <- Sys.getenv("twitter_api_secret")
access_token <- Sys.getenv("twitter_access_token")
access_token_secret <- Sys.getenv("twitter_access_token_secret")
setup_twitter_oauth(api_key,api_secret)
source("00-course-setup.r")
wd <- getwd()
api_key <- Sys.getenv("twitter_api_key")
api_secret <- Sys.getenv("twitter_api_secret")
access_token <- Sys.getenv("twitter_access_token")
access_token_secret <- Sys.getenv("twitter_access_token_secret")
setup_twitter_oauth(api_key,api_secret)
tweets <- searchTwitter(searchString = "Trump", n=25, lang=NULL, since=NULL, until=NULL, locale=NULL, geocode=NULL, sinceID=NULL, retryOnRateLimit=120)
setup_twitter_oauth(api_key,api_secret)
install.packages("httpuv")
setup_twitter_oauth(api_key,api_secret)
tweets <- searchTwitter(searchString = "Trump", n=25, lang=NULL, since=NULL, until=NULL, locale=NULL, geocode=NULL, sinceID=NULL, retryOnRateLimit=120)
tweets_df <- twListToDF(tweets)
head(tweets_df)
source("00-course-setup.r")
wd <- getwd()
# negotiate credentials
api_key <- Sys.getenv("twitter_api_key")
api_secret <- Sys.getenv("twitter_api_secret")
access_token <- Sys.getenv("twitter_access_token")
access_token_secret <- Sys.getenv("twitter_access_token_secret")
setup_twitter_oauth(api_key,api_secret)
tweets <- searchTwitter(searchString = "Trump", n=25, lang=NULL, since=NULL, until=NULL, locale=NULL, geocode=NULL, sinceID=NULL, retryOnRateLimit=120)
tweets_df <- twListToDF(tweets)
head(tweets_df)
names(tweets_df)
user <- getUser("RDataCollection")
user$name
user$lastStatus
user$followersCount
user$statusesCount
user_followers <- user$getFollowers()
user_friends <- user$getFriends()
user_timeline <- userTimeline(user, n=20)
timeline_df <- twListToDF(user_timeline)
head(timeline_df)
x <- GET("https://google.com")
x
j1 = GET(“http://www.omdbapi.com/?t=iron%20man%202&r=json”)
j1 = GET("http://www.omdbapi.com/?t=iron%20man%202&r=json”
)
j1 = GET("http://www.omdbapi.com/?t=iron%20man%202&r=json")
content(j1, as = “text”)
content(j1, as =  "text")
content(j1, as =  "parsed")
?content
j1 = GET("http://www.omdbapi.com/?t=iron%20man%202&r=xml")
content(j1, as =  "text")
content(j1, as =  "parsed")
browseURL("http://www.omdbapi.com/")
title <- "Groundhog Day" %>% URLencode()
title
url <- paste0("http://www.omdbapi.com/?t=", title)
url <- paste0("http://www.omdbapi.com/?t=", title, "&tomatoes=true")
url
omdb_res = GET(url)
content(omdb_res, as =  "parsed")
url <- paste0("http://www.omdbapi.com/?s=", title)
omdb_res = GET(url)
content(omdb_res, as =  "parsed")
res_list <- content(omdb_res, as =  "parsed")
class(res_list)
unlist(res_list)
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
content(omdb_res, as =  "parsed")
res_list <- content(omdb_res, as =  "parsed")
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
url <- paste0("http://www.omdbapi.com/?s=", title)
omdb_res = GET(url)
content(omdb_res, as =  "parsed")
res_list <- content(omdb_res, as =  "parsed")
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
res_list
res_list %>% unlist()
url <- paste0("http://www.omdbapi.com/?s=", title)
omdb_res = GET(url)
res_list <- content(omdb_res, as =  "parsed")
res_list
res_list %>% unlist()
raw_data <- fromJSON(omdb_res, flatten = TRUE)
raw_data <- jsonlite::fromJSON(omdb_res, flatten = TRUE)
omdb_res
raw_data <- content(omdb_res, as = "text"), %>% jsonlite::fromJSON(flatten = TRUE)
raw_data <- content(omdb_res, as = "text") %>% jsonlite::fromJSON(flatten = TRUE)
raw_data
res_list <- content(omdb_res, as = "text") %>% jsonlite::fromJSON(flatten = TRUE)
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
omdb_res = GET(url)
res_list <- content(omdb_res, as = "text") %>% jsonlite::fromJSON(flatten = TRUE)
res_list
res_list$Search %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
res_list$Search
class(res_list$Search)
title <- "Groundhog Day" %>% URLencode()
endpoint <- "http://www.omdbapi.com/"
url <- paste0(endpoint, "?", "t=", title, "&tomatoes=true")
omdb_res = GET(url)
res_list <- content(omdb_res, as =  "parsed")
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
url <- paste0(endpoint, "?t=", title, "&tomatoes=true")
omdb_res = GET(url)
res_list <- content(omdb_res, as =  "parsed")
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
url <- paste0(endpoint, "?s=", title)
omdb_res = GET(url)
res_list <- content(omdb_res, as = "text") %>% jsonlite::fromJSON(flatten = TRUE)
res_list$Search
apikey <- "&appid=42c7829f663f87eb05d2f12ab11f2b5d"
url <- paste0(endpoint, "q=", city, apikey)
city <- "Chicago,IL"
url <- paste0(endpoint, "q=", city, apikey)
url
GET(URL)
GET(url)
weather_res <- GET(url)
class(weather_res)
res_list <- content(weather_res, as =  "parsed")
res_list
endpoint <- "http://api.openweathermap.org/data/2.5/find?"
city <- "Chicago,IL"
url <- paste0(endpoint, "q=", city, apikey)
weather_res <- GET(url)
res_list <- content(weather_res, as =  "parsed")
res_list
res_list <- content(weather_res, as =  "text")  %>% jsonlite::fromJSON(flatten = TRUE)
res_list
res_list$list
metric <- "&units=metric"
url <- paste0(endpoint, "q=", city, metric, apikey)
weather_res <- GET(url)
res_list <- content(weather_res, as =  "parsed")
res_list <- content(weather_res, as =  "text")  %>% jsonlite::fromJSON(flatten = TRUE)
res_list$list
source("00-course-setup.r")
wd <- getwd()
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
sdfjkl
basf
## preparations -----------------------
source("00-course-setup.r")
wd <- getwd()
## case study 1: m
?fromJSON
# set temporary working directory
tempwd <- ("data/breweriesChicago")
dir.create(tempwd)
setwd(tempwd)
url <- "https://www.google.de/?#q=list+breweries+chicago"
browseURL(url)
url <- "http://thehopreview.com/blog/chicago-brewery-list"
content <- read_html(url, encoding = "utf8")
content
anchors <- html_nodes(content, css = "#block-yui_3_17_2_8_1438187725105_11398 p")
breweries <- html_text(anchors)
length(breweries)
head(breweries)
breweries <- breweries[-1]
locations <- str_extract(breweries, "[[:digit:]].+?–")
locations <- str_replace(locations, "–", ", Chicago, IL")
locations <- locations[!is.na(locations)]
locations
if (!file.exists("breweries_geo.RData")){
pos <- geocode(locations, source = "google")
geocodeQueryCheck()
save(pos, file="breweries_geo.RData")
} else {
load("breweries_geo.RData")
}
head(pos)
brewery_map <- get_map(location=c(lon=mean(pos$lon), lat=mean(pos$lat)), zoom="auto", maptype="hybrid")
p <- ggmap(brewery_map) + geom_point(data=pos, aes(x=lon, y=lat), col="red", size=3)
p
setwd(wd)
tempwd <- ("data/wikipediaStatisticians")
dir.create(tempwd)
setwd(tempwd)
## step 1: inspect page
url <- "https://en.wikipedia.org/wiki/List_of_statisticians"
browseURL(url)
html <- read_html(url)
anchors <- html_nodes(html, xpath="//a")
length(anchors) # probably too many?
anchors <- html_nodes(html, xpath="//ul/li/a[1]")
links <- html_attr(anchors, "href")
links
html <- read_html(url)
anchors <- html_nodes(html, xpath="//ul/li/a[1]")
links <- html_attr(anchors, "href")
links_iffer <-
seq_along(links) >=
seq_along(links)[str_detect(links, "Odd_Aalen")] &
seq_along(links) <=
seq_along(links)[str_detect(links, "George_Kingsley_Zipf")] &
str_detect(links, "/wiki/")
links_iffer
links_index <- seq_along(links)[links_iffer]
links <- links[links_iffer]
length(links)
anchors
names <- html_attr(anchors, "title")[links_index]
names
names <- str_replace(names, " \\(.*\\)", "")
names
## step 4: fetch personal wiki pages
baseurl <- "http://en.wikipedia.org"
HTML <- list()
Fname <- str_c(basename(links), ".html")
URL <- str_c(baseurl, links)
# loop
for ( i in seq_along(links) ){
# url
url <- URL[i]
# fname
fname <- Fname[i]
# download
if ( !file.exists(fname) ) download.file(url, fname)
# read in files
HTML[[i]] <- read_html(fname)
}
## step 4: fetch personal wiki pages
baseurl <- "http://en.wikipedia.org"
HTML <- list()
Fname <- str_c(basename(links), ".html")
URL <- str_c(baseurl, links)
# loop
for ( i in seq_along(links) ){
# url
url <- URL[i]
# fname
fname <- Fname[i]
# download
if ( !file.exists(fname) ) download.file(url, fname)
# read in files
HTML[[i]] <- read_html(fname)
}
object.size(HTML)
## step 5: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//p//a"), # note: only look for links in p sections; otherwise too many links collected
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
duplicated(connections)
table(connections)
connections$dup <- duplicated(connections)
View(connections)
dim(connections)
table(connections(dup))
table(connections$dup)
connections <- connections[!duplicated(connections)]
connections <- connections[!duplicated(connections),]
dim(connections)
table(!duplicated(connections))
# results
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
connections <- NULL
## step 5: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//p//a"), # note: only look for links in p sections; otherwise too many links collected
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
table(duplicated(connections))
connections <- connections[!duplicated(connections),]
table(duplicated(connections))
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
nodesDF <- data.frame(name = names, group = 1)
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 3)
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
names
nodesDF
nodesDF
names
nodesDF
nodesDF
rownames(nodesDF)
merge(connections, nodesDF, by.x = "from", by.y = rownames(nodesDF))
nodesDF$id < rownames(nodesDF)
rownames(nodesDF)
nodesDF$id
nodesDF$id <- rownames(nodesDF)
merge(connections, nodesDF, by.x = "from", by.y = "id", all = TRUE)
connections_df <- merge(connections, nodesDF, by.x = "from", by.y = "id", all = TRUE)
head(connections_df)
View(connections_df)
nodesDF$id <- as.numeric(rownames(nodesDF)) - 1
connections_df <- merge(connections, nodesDF, by.x = "from", by.y = "id", all = TRUE)
View(connections)
View(connections_df)
?summarise
count(connections_df, "name")
count(connections_df, name)
connections_df <- merge(connections, nodesDF, by.x = "to", by.y = "id", all = TRUE)
to_count_df <- count(connections_df, name)
order(to_count_df, n)
?arrange
arrange(to_count_df, desc = n)
arrange(to_count_df, desc(n))
connections_df <- merge(connections, nodesDF, by.x = "from", by.y = "id", all = TRUE)
to_count_df <- count(connections_df, name)
arrange(to_count_df, desc(n))
browseURL("https://www.buzzfeed.com/?country=us")
browseURL("http://flukeout.github.io/") # let's play this together until plate 8 or so!
browseURL("https://www.jstatsoft.org/about/editorialTeam")
url <- "https://www.buzzfeed.com/?country=us"
# 2. download static HTML behind the URL and parse it into an XML file
url_parsed <- read_html(url)
class(url_parsed)
html_structure(url_parsed)
as_list(url_parsed)
headings_nodes <- html_nodes(url_parsed, css = ".lede__link")
headings_nodes
headings <- html_text(headings_nodes)
headings <- str_replace_all(headings, "\\n", "") %>% str_trim()
headings
url <- "https://www.jstatsoft.org/about/editorialTeam"
url_parsed <- read_html(url)
names <- html_nodes(url_parsed, ".member a") %>% html_text()
names
names2 <- html_nodes(url_parsed, "#group a") %>% html_text()
names2
affiliations <- html_nodes(url_parsed, ".member li") %>% html_text()
str_detect(affiliations, "tatisti|athemati") %>% table
url <- "https://en.wikipedia.org/wiki/Joint_Statistical_Meetings"
browseURL(url)
url_parsed <- read_html(url)
tables <- html_table(url_parsed, fill = TRUE)
tables
meetings <- tables[[2]]
class(meetings)
head(meetings)
table(meetings$Location) %>% sort()
browseurl("https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_the_world")
browseURL("https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_the_world")
url <- "https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_the_world"
url_parsed <- read_html(url)
tables <- html_table(url_parsed, fill = TRUE)
buildings <- tables[[7]]
table(buildings$`Country/region`) %>% sort
table(buildings$City) %>% sort
browseurl("https://www.buzzfeed.com/?country=us")
browseURL("https://www.buzzfeed.com/?country=us")
tempwd <- ("data/jstatsoftStats")
dir.create(tempwd)
setwd("../../")
tempwd <- ("data/jstatsoftStats")
dir.create(tempwd)
setwd(tempwd)
browseURL("http://www.jstatsoft.org/")
baseurl <- "http://www.jstatsoft.org/article/view/v"
volurl <- paste0("0", seq(1,71,1))
volurl[1:9] <- paste0("00", seq(1, 9, 1))
brurl <- paste0("0", seq(1,9,1))
urls_list <- paste0(baseurl, volurl)
urls_list <- paste0(rep(urls_list, each = 9), "i", brurl)
names <- paste0(rep(volurl, each = 9), "_", brurl, ".html")
names
# download pages
folder <- "html_articles/"
dir.create(folder)
for (i in 1:length(urls_list)) {
if (!file.exists(paste0(folder, names[i]))) {
download.file(urls_list[i], destfile = paste0(folder, "/", names[i]))
Sys.sleep(runif(1, 0, 1))
}
}
# check success
list_files <- list.files(folder, pattern = "0.*")
list_files_path <-  list.files(folder, pattern = "0.*", full.names = TRUE)
length(list_files)
files_size <- sapply(list_files_path, file.size)
table(files_size)
list_files_path
table(files_size)
sort(files_size)
table(files_size) %>% sort()
delete_files <- list_files_path[files_size == 24752]
sapply(delete_files, file.remove)
list_files_path <-  list.files(folder, pattern = "0.*", full.names = TRUE) # update list of files
# import pages and extract content
authors <- character()
title <- character()
statistics <- character()
numViews <- numeric()
datePublish <- character()
for (i in 1:length(list_files_path)) {
html_out <- read_html(list_files_path[i])
table_out <- html_table(html_out, fill = TRUE)[[6]]
authors[i] <- table_out[1,2]
title[i] <- table_out[2,2]
statistics[i] <- table_out[4,2]
numViews[i] <- statistics[i] %>% str_extract("[[:digit:]]+") %>% as.numeric()
datePublish[i] <- statistics[i] %>% str_extract("[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}.$") %>% str_replace("\\.", "")
}
dat <- data.frame(authors = authors, title = title, numViews = numViews, datePublish = datePublish)
head(dat)
dattop <- dat[order(dat$numViews, decreasing = TRUE),]
dattop[1:10,]
summary(dat$numViews)
plot(density(dat$numViews), yaxt="n", ylab="", xlab="Number of views", main="Distribution of article page views in JSTATSOFT")
?density
plot(density(dat$numViews, from = 0, ), yaxt="n", ylab="", xlab="Number of views", main="Distribution of article page views in JSTATSOFT")
url <- "https://www.buzzfeed.com/?country=us"
url_parsed <- read_html(url)
authors <- html_nodes(url_parsed, css = ".small-meta__item:nth-child(1) a") %>% html_text()
table(authors) %>% sort
